import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'java'
    id "edu.sc.seis.launch4j" version "2.5.1"
    id "io.freefair.lombok" version "6.4.0"
}

repositories {
    maven { url "https://maven.fabricmc.net/" }
    maven { url "https://maven.glass-launcher.net/babric" }
    maven { url "https://maven.glass-launcher.net/snapshots" }
    maven { url "https://jitpack.io" }
    mavenCentral()
}

dependencies {
    // Some misc annotations to help with context hints and autocompletion.
    // https://www.jetbrains.com/help/idea/annotating-source-code.html
    implementation 'org.jetbrains:annotations:23.0.0'

    // Used to handle JSON data objects.
    // https://github.com/falkreon/Jankson
    implementation 'blue.endless:jankson:1.2.1'

    // Used to validate various URIs.
    // https://mvnrepository.com/artifact/commons-validator/commons-validator
    implementation 'commons-validator:commons-validator:1.7'

    // Used for various things related to files
    // https://mvnrepository.com/artifact/commons-io/commons-io
    implementation 'commons-io:commons-io:2.11.0'

    // Used to verify Minecraft and program arguments.
    // https://mvnrepository.com/artifact/commons-cli/commons-cli
    implementation 'commons-cli:commons-cli:1.5.0'

    // Used for parsing markdown various markdown styles. Has custom markdown support too.
    // https://github.com/commonmark/commonmark-java
    implementation "org.commonmark:commonmark:0.18.1"
    implementation "org.commonmark:commonmark-ext-autolink:0.18.1"

    // Used to handle auth
    // https://github.com/chris54721/OpenMCAuthenticator
    implementation 'com.github.chris54721:OpenMCAuthenticator:1.3.1'

    // Used to handle accessing the mod repo.
    // https://glass-repo.net
    // No public documentation yet, though if you figure it out, you can use it for whatever.
    implementation "net.glasslauncher.repo:glass-site-java-api:0.7"

    // Various utility classes that help dramatically with handling files and URLs.
    // https://github.com/calmilamsy
    // Same thing, use if you want, though there are no docs.
    implementation "net.glasslauncher:commons:1.3"

    // Used to launch minecraft. Pretty powerful and mostly straight forward to use.
    implementation "com.github.calmilamsy:glass-launch-wrapper:0e96525"
}

group 'glass-launcher'
version '0.5.0'

// Tells gradle to scream at you if you try to use any post Java 8 features.
sourceCompatibility = 1.8

// Ensures encoding doesn't get screwed up when compiling on various OSes and language encodings.
// If you get an error when compiling, remove any special characters you added.
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

// Debug task for when repos break.
task listrepos {
    doLast {
        println "Repositories:"
        project.repositories.each { println "Name: " + it.name + "; url: " + it.url }
    }
}

// Creates a fully functional exe on windows. Does not work on other OSes (duh).
createExe {
    if (DefaultNativePlatform.currentOperatingSystem.isWindows()) {
        mainClassName = 'net.glasslauncher.legacy.Main'
        icon = "${projectDir}/glass.ico"
        launch4j.outputDir = "libs"
        launch4j.outfile = "${project.name}-${project.version}.exe"
        jar = project.tasks["shadowJar"].archiveName
        doLast {
            // https://github.com/TheBoegl/gradle-launch4j/issues/68
            delete("${buildDir}/${launch4j.outputDir}/${launch4j.libraryDir}")
        }
    }
}

tasks.build.dependsOn(tasks.shadowJar)
tasks.createExe.dependsOn(tasks.shadowJar)
tasks.build.dependsOn(tasks.createExe)

jar.manifest.attributes 'Implementation-Title': 'Glass Launcher Legacy',
        'Implementation-Version': version,
        'Main-Class': 'net.glasslauncher.legacy.Main'
